# -*- coding: utf-8 -*-
"""iitkHackathon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ajpqY9_7QCX7nCPSC17641LVPMVSPGTn
"""

import math
import numpy as np
import csv
import os
import codecs

def slashescape(err):
    """ codecs error handler. err is UnicodeDecode instance. return
    a tuple with a replacement for the unencodable part of the input
    and a position where encoding should continue"""
    thebyte = err.object[err.start:err.end]
    try:
      repl = u'\\x'+hex(ord(thebyte))[2:]
      return (repl, err.end)
    except:
      repl = u'\\x'
      return (repl, err.end)
    

codecs.register_error('slashescape', slashescape)

entries = ['Machine:', 'SizeOfOptionalHeader:', 'Characteristics:', 'MajorLinkerVersion:', 'MinorLinkerVersion:', 'SizeOfCode:', 'SizeOfInitializedData:', 'SizeOfUninitializedData:', 'AddressOfEntryPoint:', 'BaseOfCode:', 'BaseOfData:', 'ImageBase:', 'SectionAlignment:', 'FileAlignment:', 'MajorOperatingSystemVersion:', 'MinorOperatingSystemVersion:', 'MajorImageVersion:', 'MinorImageVersion:', 'MajorSubsystemVersion:', 'MinorSubsystemVersion:', 'SizeOfImage:', 'SizeOfHeaders:', 'CheckSum:', 'Subsystem:', 'DllCharacteristics:', 'SizeOfStackReserve:', 'SizeOfStackCommit:', 'SizeOfHeapReserve:', 'SizeOfHeapCommit:', 'LoaderFlags:', 'NumberOfRvaAndSizes:']


def parse_static(static_files):
    full_data = []
    md5_data = []
    failed_md5 = []
    for file_ in static_files:
        values = []
        entropies = []
        rawsize = []
        virtualsize = []
        dll = 0
        ordinal = 0

        f = open(file_,'rb')
        try:
            data = f.readlines()
            ent = 0
            for line in data:
                line = line.decode('utf-8', 'slashescape')
                words = line.split()
                for i in range(len(words)):
                    try:
                        if words[i] == entries[ent]:
                            values.append(int(words[i+1],16))
                            ent += 1
                    except:
                        pass
                    
                    if words[i]=="Entropy:":
                        entropies.append(words[i+1])
                    if words[i]=="SizeOfRawData:":
                        rawsize.append(int(words[i+1],16))
                    if words[i]=="Misc_VirtualSize:":
                        virtualsize.append(int(words[i+1],16))
                    if ".dll" in words[i]:
                        dll += 1
                    elif "Ordinal[" in words[i]:
                        ordinal += 1
            assert len(entropies)>0 and len(rawsize)>0 and len(virtualsize)>0
            entropies = np.array(entropies,dtype=np.float32)
            values.append(len(entropies))
            values.append(np.mean(entropies))
            values.append(min(entropies))
            values.append(max(entropies))
            rawsize = np.array(rawsize,dtype=np.float32)
            values.append(np.mean(rawsize))
            values.append(min(rawsize))
            values.append(max(rawsize))
            virtualsize = np.array(virtualsize,dtype=np.float32)
            values.append(np.mean(virtualsize))
            values.append(min(virtualsize))
            values.append(max(virtualsize))
            values.append(dll)
            values.append(ordinal)
            full_data.append(values)
            md5_data.append(file_[-83:-19])
        except:
            failed_md5.append(file_[-83:-19])
            continue
    full_data_np = np.array(full_data)
    return (md5_data,full_data_np, failed_md5)


